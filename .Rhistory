pdata
pdata %>% arrange(age)
pdata %>% arrange(desc(age))
pdata %>% arrange(desc(age))
pdata %>% arrange(age)
pdata %>% arrange(age) %>% arrange(sex)
pdata %>% arrange(sex) %>% arrange(age)
pdata %>% arrange(age,sex)
pdata %>% arrange(sex,age)
pdata %>% arrange(age,sex)
pdata %>% summarize(n = n())
pdata %>% group_by(sex)
library(skimr)
install.packages(skimr)
install.packages("skimr")
skimr::skim(pdata)
pdata %>% is.na(sex)
pdata %>% is.na()
pdata %>% filter(is.na(sex))
pdata %>% summary()
pdata %>% group_by(sex) %>% summarize(n = n())
pdata %>% group_by(sex) %>% summarize(n = n()) %>% arrange(desc(n))
```{r}
pdata %>% group_by(sex) %>% summarize(n = n()) %>% arrange(desc(n))
```{r}
pdata %>% group_by(sex) %>% summarize(n = n(),mean_age=mean())
```
```{r}
pdata %>% group_by(sex) %>% summarize(n = n(),mean_age=mean())
```
pdata %>% group_by(sex) %>% summarize(n = n(),mean_age=mean())
pdata %>% group_by(sex) %>% summarize(n = n(),mean_age=mean(na.rm=TRUE))
pdata %>% group_by(sex) %>% summarize(n = n(),mean_age=mean(age))
pdata %>% group_by(sex) %>% summarize(n = n(),mean_age=mean(age, na.rm = TRUE))
pdata %>% t.test(age ~ sex, data = .)
View(pdata)
View(pdata)
sequences <- c("AAATCGA", "ATACAACAT", "TTGCCA")
sequences
length(sequences)
nchar(sequences)
sequences[c(1, 3)]
sample(sequences)
reverseComplement(sequences)
library(Biostrings)
sequences <- c("AAATCGA", "ATACAACAT", "TTGCCA")
reverseComplement(sequences)
?reverseComplement
sequences
length(sequences)
nchar(sequences)
sequences[c(1, 3)]
sample(sequences)
reverseComplement(sequences)
my_sequence <-
"All the world's a stage, And all the men and women merely players"
my_sequence <-
"All the world's a stage, And all the men and women merely players"
library(Biostrings)
dna <- DNAStringSet(sequences)
dna
class(dna)
methods(class = class(dna))
m_check<- methods(class = class(dna))
m_check<- methods(class = class(dna)) %>% as.data.frame()
m_check<- methods(class = class(dna)) %>% data.frame()
**Exercise** Does the object `dna` support the operations illustrated
above for a character vector, especially `length()`, `nchar()`, `[`,
and `sample()`?
```{r}
class(dna)
m_check<- methods(class = class(dna))
```
class(dna)
m_check<- methods(class = class(dna))
class(m_check)
m_check
reverse(dna)
reverseComplement(dna)
reverse(dna)
reverseComplement(dna)
DNAStringSet(my_sequence)
my_sequence
my_sequence; DNAStringSet(my_sequence)
alphabetFrequency(dna)
str(dna)
dna[,1]
dna[1,]
dna[,1]
dna[,c(1,2)]
dim(dna)
length(dna)
knitr::opts_chunk$set(echo = TRUE)
abline
anova
methods(class = "DNAStringSet"
methods(class = "DNAStringSet")
methods(class = DNAStringSet)
DNAStringSet
DNAStringSet()
DNAStringSet
showMethods(reverseComplement)
reverseComplement()
reverseComplement
reverseComplement; showMethods(reverseComplement)
getAnywhere(anova.lm)
anova
class(anova); anova
fit<- anova(cars)
fit<- lm(mpg ~ cyl, cars)
cars
?lm
?`reverseComplement,DNAStringSet-method`
?`reverseComplement,DNAStringSet-method`
library(Biostrings)
?`reverseComplement,DNAStringSet`
?`reverseComplement,DNAStringSet-class`
??reverseComplement,DNAStringSet-class
reverseComplement,DNAStringSet-metho
reverseComplement,DNAStringSet-metho
?`reverseComplement,DNAStringSet-method`
?`$<-.data.frame`
getClassDef("DNAStringSet")
?matchPattern,DNAStringSet
?`matchPattern,DNAStringSet`
?`matchPattern,DNAStringSet-method`
?`matchPattern,XStringSet-method`
?`matchPattern,DNAStringSet-method`
browseVignettes(package = "Biostrings")
fa_file <-
system.file(package="Biostrings", "extdata", "dm3_upstream2000.fa.gz")
readLines(fa_file, 5)
tail(readLines(fa_file, 44), 5)
dna <- readDNAStringSet(fa_file)
dna
length(dna)
unique(nchar(dna))
length(dna);
length(dna); unique(nchar(dna))
unique(nchar(dna))
nchar(dna)
length(nchar(dna))
length(nchar(dna))
letterFrequency(dna,letters="GC",as.prob = TRUE)
gc<- letterFrequency(dna,letters="GC",as.prob = TRUE)
gc<- letterFrequency(dna,letters="GC",as.prob = TRUE)
hist(gc)
plot(density(gc))
https://en.wikipedia.org/wiki/GC-content
gc <- letterFrequency(dna, "GC", as.prob = TRUE)
gc <-
dna %>%
letterFrequency("GC", as.prob = TRUE) %>%
tibble::as_tibble()
gc
gc <-
dna %>%
letterFrequency(.,"GC", as.prob = TRUE) %>%
tibble::as_tibble()
gc
gc <-
dna %>%
letterFrequency("GC", .,as.prob = TRUE) %>%
tibble::as_tibble()
gc <-
dna %>%
letterFrequency("GC",as.prob = TRUE) %>%
tibble::as_tibble()
gc
```{r}
sessionInfo()
gc <-
dna %>%
letterFrequency("GC",as.prob = TRUE)
gc
gc <-
dna %>%
letterFrequency("GC",as.prob = TRUE) %>%
tibble::as_tibble()
gc
BiocManager::install("Gvis")
install.packages("Gvis")
BiocManager::install("Gviz")
fl <- dir(
system.file(package = "airway", "extdata"),
pattern = "bam", full.name = TRUE
)
fl[1]
readGAlignments(fl[1])
library(GenomicAlignments)
fl <- dir(
system.file(package = "airway", "extdata"),
pattern = "bam", full.name = TRUE
)
fl[1]
readGAlignments(fl[1])
which <- GRanges(c("1:11053773-11072770", "1:11362290-11386194"))
param <- ScanBamParam(which = which, what = "seq")
readGAlignments(fl[1], param = param)
fl[1]
readGAlignments(fl[1])
which <- GRanges(c("1:11053773-11072770", "1:11362290-11386194"))
param <- ScanBamParam(which = which, what = "seq")
readGAlignments(fl[1], param = param)
readGAlignments(fl[1])
param
readGAlignments(fl[1], param = param)
which <- GRanges(c("1:11053773-11072770", "1:11362290-11386194"))
param <- ScanBamParam(which = which, what = "seq")
readGAlignments(fl[1], param = param)
readGAlignments(fl[1])
knitr::opts_chunk$set(
eval=as.logical(Sys.getenv("KNITR_EVAL", "TRUE")),
cache=as.logical(Sys.getenv("KNITR_CACHE", "TRUE"))
)
options(width = 75)
library(SummarizedExperiment)
library(airway)
data(airway)
airway
set.seed(123)
m <- matrix(
rnorm(12), nrow = 4, ncol = 3,
dimnames = list(letters[1:4], LETTERS[1:3])
)
m
dim(m)
dimnames(m)
m[1:2, 2:1]
m[1:2,]
m[1,]
m[,1]
m[ 1, , drop = FALSE]
m
m + 1
abs(m + 1)
colSums(m)
rowMeans(m)
colData(airway)
airway$dex
ridx <- rowMeans(m) > 0
m[ridx, , drop = FALSE]
l <- list(a = 1:5, b = month.abb)
names(l)
length(l)
l[c(2, 1)]
l[2]        # list of length 1, containing element 2 of original list
l[[2]]      # element 2 of original list
lengths(l)
r <- rowRanges(airway)
genome(r) <- "GRCh37"
seqinfo(r)
rowRanges(airway) <- r
seqinfo(airway)
library(dplyr)    # %>%
chr14 <-
seqinfo(r) %>%
as("GRanges") %>%
subset(seqnames == "14")
idx <- r %over% chr14
r[idx]
library(readr)
library(tibble)
pdata_file <-
system.file(package="BiocIntro", "extdata", "airway-sample-sheet.csv")
counts_file <-
system.file(package="BiocIntro", "extdata", "airway-read-counts.csv")
pdata <- read_csv(pdata_file)
counts <- read_csv(counts_file)
pdata <- column_to_rownames(pdata, "Run")
counts <- column_to_rownames(counts, "Run")
se <- SummarizedExperiment(t(counts), colData = pdata)
se
library(GenomicRanges)
library(GenomicRanges)
gr <- GRanges(c("chr1", "chr1", "chr2"), ir, strand=c("+", "-", "+"))
fl <- dir(
system.file(package = "airway", "extdata"),
pattern = "bam", full.name = TRUE
)
fl[1]
readGAlignments(fl[1])
which <- GRanges(c("1:11053773-11072770", "1:11362290-11386194"))
param <- ScanBamParam(which = which, what = "seq")
readGAlignments(fl[1], param = param)
?readGAlignments
scanBamHeader(fl[1])
scanBamHeader(fl[1], param = param)
#scanBamHeader(fl[1], param = param)
scanBamH(fl[1], param = param)
#scanBamHeader(fl[1], param = param)
scanBam(fl[1], param = param)
load("../Raw_Data//hiiragi2013.rda")
library("Biobase")
dftx <- data.frame(t(Biobase::exprs(hiiragi2013)), pData(hiiragi2013))
dftx[1:10, 1:3]
dftx[1:10, 45105:45109]
load("../Raw_Data/hiiragi2013.rda")
library("Biobase")
dftx <- data.frame(t(Biobase::exprs(hiiragi2013)), pData(hiiragi2013))
dftx[1:10, 1:3]
dftx[1:10, 45105:45109]
ggplot(dftx, aes(x = X1426642_at, y = X1418765_at)) +
geom_point(shape = 1) +
geom_smooth(method = "loess")
library("ggplot2")
ggplot(dftx, aes(x = X1426642_at, y = X1418765_at)) +
geom_point(shape = 1) +
geom_smooth(method = "loess")
selectedProbes <- c(Fgf4 = "1420085_at", Gata4 = "1418863_at",
Gata6 = "1425463_at",  Sox2 = "1416967_at")
ggplot(dftx, aes(x = X1426642_at, y = X1418765_at))  +
geom_point(aes(color = sampleColour), shape = 19) +
geom_smooth(method = "loess")
readGAlignments(fl[1])
#scanBamHeader(fl[1], param = param)
scanBam(fl[1], param = param)
indexBam(fl[1])
readGAlignments(fl[1], param = param)
suppressPackageStartupMessages(library("Biobase"))
suppressPackageStartupMessages(library("dplyr"))
suppressPackageStartupMessages(library("Hmisc"))
suppressPackageStartupMessages(library("plotly"))
install.packages("plotly")
suppressPackageStartupMessages(library("Biobase"))
suppressPackageStartupMessages(library("dplyr"))
suppressPackageStartupMessages(library("Hmisc"))
suppressPackageStartupMessages(library("plotly"))
head(DNase)
plot(DNase$con, DNase$density)
plot(DNase$con, DNase$density,
xlab = "DNase concentration (ng/ml)",
ylab = "Optical density",
pch = 1,
col = "steelblue")
abline(v = unique(DNase$conc), lty = "dotted")
library("ggplot2")
ggplot(data = DNase)
ggplot(data = DNase,
mapping = aes(x = conc, y = density))
ggplot(data = DNase,
mapping = aes(x = conc, y = density)) +
geom_point()
gg <- ggplot(data = DNase,
mapping = aes(x = conc, y = density)) +
geom_point()
print(gg)
gg + geom_point(aes(colour = Run))
if (!file.exists("./data/hiiragi2013.rda"))
download.file("https://github.com/lgatto/visualisation/raw/master/data/hiiragi2013.rda", "./data/hiiragi2013.rda")
if (!file.exists("../Raw_Data/hiiragi2013.rda"))
download.file("https://github.com/lgatto/visualisation/raw/master/data/hiiragi2013.rda", "./data/hiiragi2013.rda")
if (!file.exists("../Raw_Data/hiiragi2013.rda"))
download.file("https://github.com/lgatto/visualisation/raw/master/data/hiiragi2013.rda", "./data/hiiragi2013.rda")
load("../Raw_Data/hiiragi2013.rda")
library("Biobase")
dftx <- data.frame(t(Biobase::exprs(hiiragi2013)), pData(hiiragi2013))
dftx[1:10, 1:3]
dftx[1:10, 45105:45109]
ggplot(dftx, aes(x = X1426642_at, y = X1418765_at)) +
geom_point(shape = 1) +
geom_smooth(method = "loess")
ggplot(dftx, aes(x = X1426642_at, y = X1418765_at))  +
geom_point(aes(color = sampleColour), shape = 19) +
geom_smooth(method = "loess")
selectedProbes <- c(Fgf4 = "1420085_at", Gata4 = "1418863_at",
Gata6 = "1425463_at",  Sox2 = "1416967_at")
library("dplyr")
library("tidyr")
tmp <- data.frame(t(exprs(hiiragi2013[selectedProbes, ])))
names(tmp) <- names(selectedProbes)
tmp$sample <- rownames(tmp)
head(tmp)
genes <- gather(tmp, key = "gene", value = "expression", -sample)
head(genes)
genes %>%
filter(gene == "Gata4") %>%
ggplot(aes(x = expression)) + geom_histogram()
p <- ggplot(genes, aes(x = gene, y = expression, fill = gene))
bxplot <- p + geom_boxplot()
bxplot
jtrplot <- p +
geom_jitter(aes(colour = gene)) +
theme(legend.position = "none")
dotplot <- p + geom_dotplot(binaxis = "y", binwidth = 1/6,
stackdir = "center", stackratio = 0.75,
aes(color = gene)) +
theme(legend.position = "none")
library("ggbeeswarm")
beeplot <- p + geom_beeswarm(aes(color = gene)) +
theme(legend.position = "none")
library(patchwork)
View(pData(hiiragi2013))
?pData
Biobase::exprs(hiiragi2013)
head(Biobase::exprs(hiiragi2013) )
?exprs
hiiragi2013
dim(pData(hiiragi2013))
View(dftx)
View(dftx)
# Biobase::exprs(hiiragi2013)
selectedProbes <- c(Fgf4 = "1420085_at", Gata4 = "1418863_at",
Gata6 = "1425463_at",  Sox2 = "1416967_at")
jtrplot <- p +
geom_jitter(aes(colour = gene)) +
theme(legend.position = "none")
dotplot <- p + geom_dotplot(binaxis = "y", binwidth = 1/6,
stackdir = "center", stackratio = 0.75,
aes(color = gene)) +
theme(legend.position = "none")
library("ggbeeswarm")
beeplot <- p + geom_beeswarm(aes(color = gene)) +
theme(legend.position = "none")
library(patchwork)
BiocManager::install("patchwork")
BiocManager::install("patchwork")
library("ggbeeswarm")
beeplot <- p + geom_beeswarm(aes(color = gene)) +
theme(legend.position = "none")
library(patchwork)
devtools::install_github("thomasp85/patchwork")
library(patchwork)
jtrplot + dotplot + beeplot
library(patchwork)
jtrplot + dotplot + beeplot
densplot <- ggplot(genes, aes(x = expression, color = gene)) +
geom_density() +
theme(legend.position = "none")
ecdfplot <- ggplot(genes, aes(x = expression, color = gene)) +
stat_ecdf() +
theme(legend.position = "none")
densplot + ecdfplot
sim <- data.frame(x = exp(rnorm(n = 1e5,
mean = sample(c(2, 5),
size = 1e5,
replace = TRUE))))
p1 <-  ggplot(sim, aes(x)) +
geom_histogram(binwidth = 10, boundary = 0) +
xlim(0, 400)
p2 <-  ggplot(sim, aes(log(x))) +
geom_histogram(bins = 30)
p1 + p2
dfx <- as.data.frame(Biobase::exprs(hiiragi2013))
scp <- ggplot(dfx, aes(x= `59 E4.5 (PE)`,
y = `92 E4.5 (FGF4-KO)`))
scp + geom_point()
scp + geom_density2d(h = 0.5, bins = 60)
scp + geom_hex()
p1 <- ggplot(dftx, aes(x = X1426642_at, y = X1418765_at, colour = lineage)) +
geom_point()
p2 <- ggplot(dftx, aes(x = X1426642_at, y = X1418765_at)) +
geom_point() +
facet_grid( . ~ lineage )
p1 + p2
ggplot(dftx,
aes(x = X1426642_at, y = X1418765_at)) +
geom_point() +
facet_grid( Embryonic.day ~ lineage )
library("plotly")
scp <- ggplot(dfx[1:100, ],
aes(x= `59 E4.5 (PE)`, y = `92 E4.5 (FGF4-KO)`))
scp2 <- scp + geom_point()
ggplotly(scp2)
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
getwd()
methods(class = lm)
abline
anova
seq = c("AAACA", "CATGC")
nchar(seq)
"DNAStringSet"
library(BiocManager)
BiocManager::available("readr")
class(anova); anova
fit<- lm(Sepal.Length~Sepal.Width , iris)
anova
getAnywhere(anova.lm)
library(Biostrings)
?`reverseComplement,DNAStringSet-class`
?`reverseComplement,DNAStringSet-method`
library(GenomicRanges)
exon = GRanges(c("chr1:20-30:+","chr1:40-50:+","chr1:45-55:+"))
exon
start(exon)
end(exon)
width(exon)
snp<- GRanges(c("chr:12345","chr:23456"))
shift(snp,1)
flank(snp,10)
reduce(exon)
disjoin(exon)
snp<-GRanges(c("chr1:25","chr1:35","chr1:48"))
snp
exon
countOverlaps(snp,exon)
countOverlaps(exon,snp)
snp %over% exon
snp[snp %over% exon]
cvg<- coverage(exon)
cvg
(grcvg<- cvg %>% as("GRanges"))
mcols(grcvg)
library(Biostrings)
df<- DataFrame(
i=1:3,
dna = DNAStringSet(c("AAA","CCC","GGG")),
gr = exon
)
df

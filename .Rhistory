stackdir = "center", stackratio = 0.75,
aes(color = gene)) +
theme(legend.position = "none")
library("ggbeeswarm")
beeplot <- p + geom_beeswarm(aes(color = gene)) +
theme(legend.position = "none")
library(patchwork)
BiocManager::install("patchwork")
BiocManager::install("patchwork")
library("ggbeeswarm")
beeplot <- p + geom_beeswarm(aes(color = gene)) +
theme(legend.position = "none")
library(patchwork)
devtools::install_github("thomasp85/patchwork")
library(patchwork)
jtrplot + dotplot + beeplot
library(patchwork)
jtrplot + dotplot + beeplot
densplot <- ggplot(genes, aes(x = expression, color = gene)) +
geom_density() +
theme(legend.position = "none")
ecdfplot <- ggplot(genes, aes(x = expression, color = gene)) +
stat_ecdf() +
theme(legend.position = "none")
densplot + ecdfplot
sim <- data.frame(x = exp(rnorm(n = 1e5,
mean = sample(c(2, 5),
size = 1e5,
replace = TRUE))))
p1 <-  ggplot(sim, aes(x)) +
geom_histogram(binwidth = 10, boundary = 0) +
xlim(0, 400)
p2 <-  ggplot(sim, aes(log(x))) +
geom_histogram(bins = 30)
p1 + p2
dfx <- as.data.frame(Biobase::exprs(hiiragi2013))
scp <- ggplot(dfx, aes(x= `59 E4.5 (PE)`,
y = `92 E4.5 (FGF4-KO)`))
scp + geom_point()
scp + geom_density2d(h = 0.5, bins = 60)
scp + geom_hex()
p1 <- ggplot(dftx, aes(x = X1426642_at, y = X1418765_at, colour = lineage)) +
geom_point()
p2 <- ggplot(dftx, aes(x = X1426642_at, y = X1418765_at)) +
geom_point() +
facet_grid( . ~ lineage )
p1 + p2
ggplot(dftx,
aes(x = X1426642_at, y = X1418765_at)) +
geom_point() +
facet_grid( Embryonic.day ~ lineage )
library("plotly")
scp <- ggplot(dfx[1:100, ],
aes(x= `59 E4.5 (PE)`, y = `92 E4.5 (FGF4-KO)`))
scp2 <- scp + geom_point()
ggplotly(scp2)
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
getwd()
methods(class = lm)
abline
anova
seq = c("AAACA", "CATGC")
nchar(seq)
"DNAStringSet"
library(BiocManager)
BiocManager::available("readr")
class(anova); anova
fit<- lm(Sepal.Length~Sepal.Width , iris)
anova
getAnywhere(anova.lm)
library(Biostrings)
?`reverseComplement,DNAStringSet-class`
?`reverseComplement,DNAStringSet-method`
library(GenomicRanges)
exon = GRanges(c("chr1:20-30:+","chr1:40-50:+","chr1:45-55:+"))
exon
start(exon)
end(exon)
width(exon)
snp<- GRanges(c("chr:12345","chr:23456"))
shift(snp,1)
flank(snp,10)
reduce(exon)
disjoin(exon)
snp<-GRanges(c("chr1:25","chr1:35","chr1:48"))
snp
exon
countOverlaps(snp,exon)
countOverlaps(exon,snp)
snp %over% exon
snp[snp %over% exon]
cvg<- coverage(exon)
cvg
(grcvg<- cvg %>% as("GRanges"))
mcols(grcvg)
library(Biostrings)
df<- DataFrame(
i=1:3,
dna = DNAStringSet(c("AAA","CCC","GGG")),
gr = exon
)
df
knitr::opts_chunk$set(
eval=as.logical(Sys.getenv("KNITR_EVAL", "TRUE")),
cache=as.logical(Sys.getenv("KNITR_CACHE", "TRUE"))
)
options(width = 75)
library(SummarizedExperiment)
library(airway)
data(airway)
airway
dim(airway)
print(dim(airway))
print(dimnames(airway))
print(dimnames(airway) %>% glimpse())
library(dplyr)
print(dim(airway))few elements of each `dimnames`.
print(dim(airway))
print(dimnames(airway) %>% glimpse())
dimnames(airway) %>% glimpse()
assay(airway) %>% dim()
assay(airway) %>% class()
assay(airway) %>% class() %>% print()
assay(airway) %>% dim() %>% print()
assay(airway) %>% class() %>% print()
assay(airway) %>% head() %>% print()
library(EnrichmentBrowser)
library(DESeq2)
library(airway)
library(dplyr)
library(org.Hs.eg.db)
library(GO.db)
library(limma)
library(airway)
data(airway)
airway$dex <- relevel(airway$dex, "untrt")
library(dplyr)
library(tibble)
tbl <- res %>%
as.data.frame() %>%
rownames_to_column("ENSEMBL") %>%
as_tibble()
library(DESeq2)
des <- DESeqDataSet(airway, design = ~ cell + dex)
des <- DESeq(des)
res <- results(des)
library(dplyr)
library(tibble)
tbl <- res %>%
as.data.frame() %>%
rownames_to_column("ENSEMBL") %>%
as_tibble()
tbl
library(org.Hs.eg.db)
tbl <- tbl %>%
mutate(
ENTREZID = mapIds(
org.Hs.eg.db, ENSEMBL, "ENTREZID", "ENSEMBL"
) %>% unname()
)
tbl
tbl <- tbl %>%
filter(!is.na(padj), !is.na(ENTREZID))
tbl
library(limma)
go <-
goana(tbl$ENTREZID[tbl$padj < .05], tbl$ENTREZID, "Hs") %>%
as_tibble()
library(GO.db)
go <-
go %>%
mutate(
GOID = mapIds(
GO.db, .$Term, "GOID", "TERM"
) %>% unname()
) %>%
select(GOID, everything()) %>%
arrange(P.DE)
library(limma)
go <-
goana(tbl$ENTREZID[tbl$padj < .05], tbl$ENTREZID, "Hs") %>%
as_tibble()
go
?goana
library(limma)
go <-
goana(tbl$ENTREZID[tbl$padj < .05], tbl$ENTREZID) %>%
as_tibble()
go
tbl %>% arrange(P.DE)
go %>% arrange(P.DE)
go %>% filter(grepl("glucocorticoid", Term))
genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>%
as_tibble() %>%
select(ENTREZID, GO, ONTOLOGY) %>%
distinct()
genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>%
as.data.frame() %>%
as_tibble() %>%
select(ENTREZID, GO, ONTOLOGY) %>%
distinct()
genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>%
as.data.frame() %>%
#as_tibble() %>%
select(ENTREZID, GO, ONTOLOGY) %>%
distinct()
genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>%
data.frame() %>%
#as_tibble() %>%
select(ENTREZID, GO, ONTOLOGY) %>%
distinct()
genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>% class()
genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>% class()
as_tibble() %>% class()
genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>% class()
as_tibble() %>% class()
#     select(ENTREZID, GO, ONTOLOGY) %>%
#     distinct()
# genesets
plot(-log10(P.DE) ~N, go)
genesets
genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>%
as_tibble() %>% class()
genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>%
as_tibble()
class(genesets)
names(genesets)
genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>%
as_tibble() %>%
select(ENTREZID, GO, ONTOLOGY)
genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>%
as_tibble() %>%
dplyr::select(ENTREZID, GO, ONTOLOGY)
genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>%
as_tibble() %>%
dplyr::select(ENTREZID, GO, ONTOLOGY) %>%
distinct()
genesets
sessionInfo()
library(GO.db)
go <-
go %>%
mutate(
GOID = mapIds(
GO.db, .$Term, "GOID", "TERM"
) %>% unname()
) %>%
select(GOID, everything()) %>%
arrange(P.DE)
library(GO.db)
go <-
go %>%
mutate(
GOID = mapIds(
GO.db, .$Term, "GOID", "TERM"
) %>% unname()
) %>%
dplyr::select(GOID, everything()) %>%
arrange(P.DE)
??select
?select
findFunction(select)
set.seed(2) # sets a random seed
numFlips = 100
probHead = 0.59
coinFlips = sample(c("H", "T"), size = numFlips,
replace = TRUE, prob = c(probHead, 1 - probHead))
head(coinFlips)
table(coinFlips)
library("dplyr")
k = 0:numFlips
numHeads = sum(coinFlips == "H")
binomDensity = tibble(k = k,
p = dbinom(k, size = numFlips, prob = 0.5))
sum(p)
library("dplyr")
k = 0:numFlips
numHeads = sum(coinFlips == "H")
binomDensity = tibble(k = k,
p = dbinom(k, size = numFlips, prob = 0.5))
sum(p)
binomDensity = tibble(k = k, p = dbinom(k, size = numFlips, prob = 0.5))
View(binomDensity)
View(binomDensity)
sum(binomDensity$p)
?dbinom
?set.seed
binomDensity %>% ggplot() +
geom_histogram()
library(ggplot2)
binomDensity %>% ggplot() +
geom_histogram()
binomDensity %>% select(p) %>%  ggplot() +
geom_histogram()
binomDensity %>% dplyr::select(p) %>%  ggplot() +
geom_histogram()
binomDensity %>% dplyr::select(p) %>%  ggplot(aex(p)) +
geom_histogram()
binomDensity %>% dplyr::select(p) %>%  ggplot(aes(p)) +
geom_histogram()
binomDensity %>% dplyr::select(p) %>%  ggplot(aes(p)) +
geom_density() +
theme_bw()
sum(dbinom(k, size = numFlips, prob = 0.05))
library("ggplot2")
ggplot(binomDensity) +
geom_bar(aes(x = k, y = p), stat = "identity") +
geom_vline(xintercept = numHeads, col = "blue")
binomDensity = tibble(k = k, p = dbinom(k, size = numFlips, prob = 0.05))
ggplot(binomDensity) +
geom_bar(aes(x = k, y = p), stat = "identity") +
geom_vline(xintercept = numHeads, col = "blue")
alpha = 0.05
binomDensity_05 = tibble(k = k, p = dbinom(k, size = numFlips, prob = 0.05))
ggplot(binomDensity_05) +
geom_bar(aes(x = k, y = p), stat = "identity") +
geom_vline(xintercept = numHeads, col = "blue")
library(ggplot2)
binomDensity %>% dplyr::select(p) %>%  ggplot(aes(p)) +
geom_density() +
theme_bw()
library("dplyr")
k = 0:numFlips
numHeads = sum(coinFlips == "H")
binomDensity = tibble(k = k, p = dbinom(k, size = numFlips, prob = 0.5))
library(ggplot2)
binomDensity %>% dplyr::select(p) %>%  ggplot(aes(p)) +
geom_density() +
theme_bw()
binomDensity %>% arrange(p)
orderBinomDenisty <- arrange(binomDensity, p)
orderBinomDenisty[1,] # most unlikely
orderBinomDenisty[101,]
binomDensity =  arrange(binomDensity, p) %>%
mutate(reject = (cumsum(p) <= alpha))
binomDensity
ggplot(binomDensity) +
geom_bar(aes(x = k, y = p, fill = reject), stat = "identity") +
scale_fill_manual(
values = c(`TRUE` = "red", `FALSE` = "darkgrey")) + theme_minimal() +
geom_vline(xintercept = numHeads, col = "blue") +
theme(legend.position = "none")
?sample
k
alpha = 0.01
binomDensity %>% arrange(p) %>%
ggplot() +
geom_bar(aes(x = k, y = p, fill = reject), stat = "identity") +
scale_fill_manual(
values = c(`TRUE` = "red", `FALSE` = "darkgrey")) + theme_minimal() +
geom_vline(xintercept = numHeads, col = "blue") +
theme(legend.position = "none")
alpha = 0.01
binomDensity %>% arrange(p) %>%
mutate(reject = (cumsum(p) <= alpha)) %>%
ggplot() +
geom_bar(aes(x = k, y = p, fill = reject), stat = "identity") +
scale_fill_manual(values = c(`TRUE` = "red", `FALSE` = "darkgrey")) + theme_minimal() +
geom_vline(xintercept = numHeads, col = "blue") +
theme(legend.position = "none")
binom.test(x = numHeads, n = numFlips, p = 0.5)
binom.test(x = numHeads, n = numFlips, p = 0.5, alpha = 0.01)
?binom.test
binom.test(x = numHeads, n = numFlips, p = 0.5, conf.level = = 0.95)
binom.test(x = numHeads, n = numFlips, p = 0.5, conf.level = 0.95)
binom.test(x = numHeads, n = numFlips, p = 0.5, conf.level = 0.99)
binom.test(x = numHeads, n = numFlips, p = 0.5, conf.level = 0.05)
binom.test(x = numHeads, n = numFlips, p = 0.5, conf.level = 0.95)
binom.test(x = numHeads, n = numFlips, p = 0.5, conf.level = 0.99)
library("ggbeeswarm")
data("PlantGrowth")
ggplot(PlantGrowth, aes(y = weight, x = group, col = group, size = 4, alpha = 0.7)) +
geom_beeswarm() + theme(legend.position = "none") + theme_minimal()
head(PlantGrowth)
head(PlantGrowth)
t.test(PlantGrowth$weight[PlantGrowth$group == "ctrl"], PlantGrowth$weight[PlantGrowth$group == "trt1"], var.equal = TRUE)
table(PlantGrowth)
?table
ftable(PlantGrowth)
ftable(PlantGrowth$group)
tt = with(PlantGrowth,
t.test(weight[group =="ctrl"],
weight[group =="trt2"],
var.equal = TRUE))
tt
abs_t_null = with(
dplyr::filter(PlantGrowth, group %in% c("ctrl", "trt2")),
replicate(10000,
abs(t.test(weight ~ sample(group))$statistic)))
ggplot(tibble(`|t|` = abs_t_null), aes(x = `|t|`)) +
geom_histogram(binwidth = 0.1, boundary = 0) + theme_minimal() +
geom_vline(xintercept = abs(tt$statistic), col = "red")
?with
mean(abs(tt$statistic) <= abs_t_null)
ggplot(tibble(`|t|` = abs_t_null), aes(x = `|t|`)) +
geom_histogram(binwidth = 0.1, boundary = 0) + theme_minimal() +
geom_vline(xintercept = abs(tt$statistic), col = "red")
mean(abs(tt$statistic) <= abs_t_null)
library(MASS)
library(ISLR)
data(Boston) # use fix(Boston) to bring up a data editor
names(Boston)
lm.fit <- lm(medv ~ lstat , data = Boston) # You need to tell R what data to use
summary(lm.fit)
coef(lm.fit) # extract coefficients
confint(lm.fit) # extract confidence intervals
predict(lm.fit ,data.frame(lstat=(c(5,10 ,15))), interval = "confidence")
plot(Boston$lstat, Boston$mdev, pch = 19)
abline (lm.fit ,lwd=3,col ="red")
coef(lm.fit)
fix(Boston)
head(Boston)
Boston %>% ggplot(aes(x=lstat,y=medv)) + geom_point()
Boston %>% ggplot(aes(x=lstat,y=medv)) + geom_point +
geom_smooth(method=lm)
Boston %>% ggplot(aes(x=lstat,y=medv)) + geom_point +
geom_smooth(method='lm')
Boston %>% ggplot(aes(x=lstat,y=medv)) + geom_point() +
geom_smooth(method='lm')
Boston$mdev
plot(Boston$lstat, Boston$mdev, pch = 19)
abline (lm.fit ,lwd=3,col ="red")
plot(Boston$lstat, Boston$medv, pch = 19)
abline (lm.fit ,lwd=3,col ="red")
Boston %>% ggplot(aes(x=lstat,y=mdev)) + geom_point() +
geom_smooth(method='lm')
Boston %>% ggplot(aes(x=lstat,y=medv)) + geom_point() +
geom_smooth(method='lm')
plot(Boston$lstat, Boston$medv, pch = 19)
abline (lm.fit ,lwd=3,col ="red")
par(mfrow=c(2,2))
plot(lm.fit)
lm.fit <- lm(medv ~ lstat + age , data = Boston )
summary(lm.fit)
lm.fit <- lm(medv~. , data = Boston)
summary (lm.fit)
head(Boston)
lm.fit <- lm(medv ~ lstat + dis , data = Boston )
summary(lm.fit)
lm.fit <- lm(medv ~.-age, data = Boston)
lm.iteract <- lm(medv ~ lstat * age ,data = Boston)
summary(lm.iteract)
x_mean = mean(Boston$lstat)
xi=Boston$lstat
n=length(Boston$lstat)
sigma =
SE = sqrt(( 1/n ]) + (x_mean)^2 / Σ(xi - x_mean)^2)
sigma =
SE = sqrt( (1/n) + ((x_mean)^2 / Σ(xi - x_mean)^2))
SE = sqrt( (1/n) + ((x_mean)^2 / Σ(xi - x_mean)^2))
sigma =
SE = sqrt( (1/n) + ((x_mean)^2 / sum(xi - x_mean)^2))
(x_mean)^2
um(xi - x_mean)^2
sum(xi - x_mean)^2)
sigma =
SE = sqrt( (1/n) + ((x_mean)^2/sum((xi - x_mean)^2)))
sigma = sd(Boston$lstat)
SE = sigma*sqrt( (1/n) + ((x_mean)^2/sum((xi - x_mean)^2)))
SE_b1 = sigma*sqrt( (1/n) + ((x_mean)^2/sum((xi - x_mean)^2)))
(lm.fit)
summary(lm.fit)
(lm(medv ~ lstat , data = Boston))
summary((lm(medv ~ lstat , data = Boston)))
SE_b1 = sigma*sqrt( (1/n-2) + ((x_mean)^2/sum((xi - x_mean)^2)))
n
sigma = sd(Boston$lstat)
SE_b1 = sigma*sqrt( (1/n-2) + ((x_mean)^2/sum((xi - x_mean)^2)))
xi - x_mean
fit1<-lm(medv ~ lstat , data = Boston)
summary(fit1)
fit1$residuals
sum(fit1$residuals)
SE_b1 = sigma/sum((xi - x_mean)^2)
SE_b1 = sqrt(var_epsilon/sum((xi - x_mean)^2))
var_epsilon = var(fit1$residuals)
SE_b1 = sqrt(var_epsilon/sum((xi - x_mean)^2))
fit1<-lm(medv ~ lstat , data = Boston)
(summary(fit1))
#sanity check
sum(fit1$residuals) # very close to 0: good.
x_mean = mean(Boston$lstat)
xi=Boston$lstat
n=length(Boston$lstat)
var_epsilon = var(fit1$residuals)
SE_b1 = sqrt(var_epsilon/sum((xi - x_mean)^2))
SE_b0 = sqrt(var_epsilon ((1/n) + x_mean^2/sum((xi - x_mean)^2))) # looks good
SE_b0 = sqrt(var_epsilon*((1/n) + x_mean^2/sum((xi - x_mean)^2))) # looks good
(summary(fit1))
str(fit1)
plot(Boston$lstat, Boston$mdev, pch = 19)
plot(Boston$lstat, Boston$medv, pch = 19)
Boston %>% ggplot(aes(x=lstat,y=medv)) + geom_point() +
geom_smooth(method='lm')
plot(Boston$lstat, Boston$mdev, pch = 19)
abline (lm.fit ,lwd=3,col ="red")
plot(Boston$lstat, Boston$medv, pch = 19)
abline (lm.fit ,lwd=3,col ="red")

genesets <-
AnnotationDbi::select(org.Hs.eg.db, tbl$ENTREZID, "GO", "ENTREZID") %>%
as_tibble() %>%
dplyr::select(ENTREZID, GO, ONTOLOGY) %>%
distinct()
genesets
sessionInfo()
library(GO.db)
go <-
go %>%
mutate(
GOID = mapIds(
GO.db, .$Term, "GOID", "TERM"
) %>% unname()
) %>%
select(GOID, everything()) %>%
arrange(P.DE)
library(GO.db)
go <-
go %>%
mutate(
GOID = mapIds(
GO.db, .$Term, "GOID", "TERM"
) %>% unname()
) %>%
dplyr::select(GOID, everything()) %>%
arrange(P.DE)
??select
?select
findFunction(select)
set.seed(2) # sets a random seed
numFlips = 100
probHead = 0.59
coinFlips = sample(c("H", "T"), size = numFlips,
replace = TRUE, prob = c(probHead, 1 - probHead))
head(coinFlips)
table(coinFlips)
library("dplyr")
k = 0:numFlips
numHeads = sum(coinFlips == "H")
binomDensity = tibble(k = k,
p = dbinom(k, size = numFlips, prob = 0.5))
sum(p)
library("dplyr")
k = 0:numFlips
numHeads = sum(coinFlips == "H")
binomDensity = tibble(k = k,
p = dbinom(k, size = numFlips, prob = 0.5))
sum(p)
binomDensity = tibble(k = k, p = dbinom(k, size = numFlips, prob = 0.5))
View(binomDensity)
View(binomDensity)
sum(binomDensity$p)
?dbinom
?set.seed
binomDensity %>% ggplot() +
geom_histogram()
library(ggplot2)
binomDensity %>% ggplot() +
geom_histogram()
binomDensity %>% select(p) %>%  ggplot() +
geom_histogram()
binomDensity %>% dplyr::select(p) %>%  ggplot() +
geom_histogram()
binomDensity %>% dplyr::select(p) %>%  ggplot(aex(p)) +
geom_histogram()
binomDensity %>% dplyr::select(p) %>%  ggplot(aes(p)) +
geom_histogram()
binomDensity %>% dplyr::select(p) %>%  ggplot(aes(p)) +
geom_density() +
theme_bw()
sum(dbinom(k, size = numFlips, prob = 0.05))
library("ggplot2")
ggplot(binomDensity) +
geom_bar(aes(x = k, y = p), stat = "identity") +
geom_vline(xintercept = numHeads, col = "blue")
binomDensity = tibble(k = k, p = dbinom(k, size = numFlips, prob = 0.05))
ggplot(binomDensity) +
geom_bar(aes(x = k, y = p), stat = "identity") +
geom_vline(xintercept = numHeads, col = "blue")
alpha = 0.05
binomDensity_05 = tibble(k = k, p = dbinom(k, size = numFlips, prob = 0.05))
ggplot(binomDensity_05) +
geom_bar(aes(x = k, y = p), stat = "identity") +
geom_vline(xintercept = numHeads, col = "blue")
library(ggplot2)
binomDensity %>% dplyr::select(p) %>%  ggplot(aes(p)) +
geom_density() +
theme_bw()
library("dplyr")
k = 0:numFlips
numHeads = sum(coinFlips == "H")
binomDensity = tibble(k = k, p = dbinom(k, size = numFlips, prob = 0.5))
library(ggplot2)
binomDensity %>% dplyr::select(p) %>%  ggplot(aes(p)) +
geom_density() +
theme_bw()
binomDensity %>% arrange(p)
orderBinomDenisty <- arrange(binomDensity, p)
orderBinomDenisty[1,] # most unlikely
orderBinomDenisty[101,]
binomDensity =  arrange(binomDensity, p) %>%
mutate(reject = (cumsum(p) <= alpha))
binomDensity
ggplot(binomDensity) +
geom_bar(aes(x = k, y = p, fill = reject), stat = "identity") +
scale_fill_manual(
values = c(`TRUE` = "red", `FALSE` = "darkgrey")) + theme_minimal() +
geom_vline(xintercept = numHeads, col = "blue") +
theme(legend.position = "none")
?sample
k
alpha = 0.01
binomDensity %>% arrange(p) %>%
ggplot() +
geom_bar(aes(x = k, y = p, fill = reject), stat = "identity") +
scale_fill_manual(
values = c(`TRUE` = "red", `FALSE` = "darkgrey")) + theme_minimal() +
geom_vline(xintercept = numHeads, col = "blue") +
theme(legend.position = "none")
alpha = 0.01
binomDensity %>% arrange(p) %>%
mutate(reject = (cumsum(p) <= alpha)) %>%
ggplot() +
geom_bar(aes(x = k, y = p, fill = reject), stat = "identity") +
scale_fill_manual(values = c(`TRUE` = "red", `FALSE` = "darkgrey")) + theme_minimal() +
geom_vline(xintercept = numHeads, col = "blue") +
theme(legend.position = "none")
binom.test(x = numHeads, n = numFlips, p = 0.5)
binom.test(x = numHeads, n = numFlips, p = 0.5, alpha = 0.01)
?binom.test
binom.test(x = numHeads, n = numFlips, p = 0.5, conf.level = = 0.95)
binom.test(x = numHeads, n = numFlips, p = 0.5, conf.level = 0.95)
binom.test(x = numHeads, n = numFlips, p = 0.5, conf.level = 0.99)
binom.test(x = numHeads, n = numFlips, p = 0.5, conf.level = 0.05)
binom.test(x = numHeads, n = numFlips, p = 0.5, conf.level = 0.95)
binom.test(x = numHeads, n = numFlips, p = 0.5, conf.level = 0.99)
library("ggbeeswarm")
data("PlantGrowth")
ggplot(PlantGrowth, aes(y = weight, x = group, col = group, size = 4, alpha = 0.7)) +
geom_beeswarm() + theme(legend.position = "none") + theme_minimal()
head(PlantGrowth)
head(PlantGrowth)
t.test(PlantGrowth$weight[PlantGrowth$group == "ctrl"], PlantGrowth$weight[PlantGrowth$group == "trt1"], var.equal = TRUE)
table(PlantGrowth)
?table
ftable(PlantGrowth)
ftable(PlantGrowth$group)
tt = with(PlantGrowth,
t.test(weight[group =="ctrl"],
weight[group =="trt2"],
var.equal = TRUE))
tt
abs_t_null = with(
dplyr::filter(PlantGrowth, group %in% c("ctrl", "trt2")),
replicate(10000,
abs(t.test(weight ~ sample(group))$statistic)))
ggplot(tibble(`|t|` = abs_t_null), aes(x = `|t|`)) +
geom_histogram(binwidth = 0.1, boundary = 0) + theme_minimal() +
geom_vline(xintercept = abs(tt$statistic), col = "red")
?with
mean(abs(tt$statistic) <= abs_t_null)
ggplot(tibble(`|t|` = abs_t_null), aes(x = `|t|`)) +
geom_histogram(binwidth = 0.1, boundary = 0) + theme_minimal() +
geom_vline(xintercept = abs(tt$statistic), col = "red")
mean(abs(tt$statistic) <= abs_t_null)
library(MASS)
library(ISLR)
data(Boston) # use fix(Boston) to bring up a data editor
names(Boston)
lm.fit <- lm(medv ~ lstat , data = Boston) # You need to tell R what data to use
summary(lm.fit)
coef(lm.fit) # extract coefficients
confint(lm.fit) # extract confidence intervals
predict(lm.fit ,data.frame(lstat=(c(5,10 ,15))), interval = "confidence")
plot(Boston$lstat, Boston$mdev, pch = 19)
abline (lm.fit ,lwd=3,col ="red")
coef(lm.fit)
fix(Boston)
head(Boston)
Boston %>% ggplot(aes(x=lstat,y=medv)) + geom_point()
Boston %>% ggplot(aes(x=lstat,y=medv)) + geom_point +
geom_smooth(method=lm)
Boston %>% ggplot(aes(x=lstat,y=medv)) + geom_point +
geom_smooth(method='lm')
Boston %>% ggplot(aes(x=lstat,y=medv)) + geom_point() +
geom_smooth(method='lm')
Boston$mdev
plot(Boston$lstat, Boston$mdev, pch = 19)
abline (lm.fit ,lwd=3,col ="red")
plot(Boston$lstat, Boston$medv, pch = 19)
abline (lm.fit ,lwd=3,col ="red")
Boston %>% ggplot(aes(x=lstat,y=mdev)) + geom_point() +
geom_smooth(method='lm')
Boston %>% ggplot(aes(x=lstat,y=medv)) + geom_point() +
geom_smooth(method='lm')
plot(Boston$lstat, Boston$medv, pch = 19)
abline (lm.fit ,lwd=3,col ="red")
par(mfrow=c(2,2))
plot(lm.fit)
lm.fit <- lm(medv ~ lstat + age , data = Boston )
summary(lm.fit)
lm.fit <- lm(medv~. , data = Boston)
summary (lm.fit)
head(Boston)
lm.fit <- lm(medv ~ lstat + dis , data = Boston )
summary(lm.fit)
lm.fit <- lm(medv ~.-age, data = Boston)
lm.iteract <- lm(medv ~ lstat * age ,data = Boston)
summary(lm.iteract)
x_mean = mean(Boston$lstat)
xi=Boston$lstat
n=length(Boston$lstat)
sigma =
SE = sqrt(( 1/n ]) + (x_mean)^2 / Σ(xi - x_mean)^2)
sigma =
SE = sqrt( (1/n) + ((x_mean)^2 / Σ(xi - x_mean)^2))
SE = sqrt( (1/n) + ((x_mean)^2 / Σ(xi - x_mean)^2))
sigma =
SE = sqrt( (1/n) + ((x_mean)^2 / sum(xi - x_mean)^2))
(x_mean)^2
um(xi - x_mean)^2
sum(xi - x_mean)^2)
sigma =
SE = sqrt( (1/n) + ((x_mean)^2/sum((xi - x_mean)^2)))
sigma = sd(Boston$lstat)
SE = sigma*sqrt( (1/n) + ((x_mean)^2/sum((xi - x_mean)^2)))
SE_b1 = sigma*sqrt( (1/n) + ((x_mean)^2/sum((xi - x_mean)^2)))
(lm.fit)
summary(lm.fit)
(lm(medv ~ lstat , data = Boston))
summary((lm(medv ~ lstat , data = Boston)))
SE_b1 = sigma*sqrt( (1/n-2) + ((x_mean)^2/sum((xi - x_mean)^2)))
n
sigma = sd(Boston$lstat)
SE_b1 = sigma*sqrt( (1/n-2) + ((x_mean)^2/sum((xi - x_mean)^2)))
xi - x_mean
fit1<-lm(medv ~ lstat , data = Boston)
summary(fit1)
fit1$residuals
sum(fit1$residuals)
SE_b1 = sigma/sum((xi - x_mean)^2)
SE_b1 = sqrt(var_epsilon/sum((xi - x_mean)^2))
var_epsilon = var(fit1$residuals)
SE_b1 = sqrt(var_epsilon/sum((xi - x_mean)^2))
fit1<-lm(medv ~ lstat , data = Boston)
(summary(fit1))
#sanity check
sum(fit1$residuals) # very close to 0: good.
x_mean = mean(Boston$lstat)
xi=Boston$lstat
n=length(Boston$lstat)
var_epsilon = var(fit1$residuals)
SE_b1 = sqrt(var_epsilon/sum((xi - x_mean)^2))
SE_b0 = sqrt(var_epsilon ((1/n) + x_mean^2/sum((xi - x_mean)^2))) # looks good
SE_b0 = sqrt(var_epsilon*((1/n) + x_mean^2/sum((xi - x_mean)^2))) # looks good
(summary(fit1))
str(fit1)
plot(Boston$lstat, Boston$mdev, pch = 19)
plot(Boston$lstat, Boston$medv, pch = 19)
Boston %>% ggplot(aes(x=lstat,y=medv)) + geom_point() +
geom_smooth(method='lm')
plot(Boston$lstat, Boston$mdev, pch = 19)
abline (lm.fit ,lwd=3,col ="red")
plot(Boston$lstat, Boston$medv, pch = 19)
abline (lm.fit ,lwd=3,col ="red")
suppressPackageStartupMessages({
library(BiocStyle)
library(knitr)
library(rmarkdown)
})
options(width = 100)
opts_chunk$set(fig.width = 5, fig.height = 5, eval = FALSE)
datadir <- "../Raw_Data/airway/"
meta <- read.delim(paste0(datadir, "/airway/airway_meta.txt"),
header = TRUE, as.is = TRUE)
datadir <- "../Raw_Data"
meta <- read.delim(paste0(datadir, "/airway/airway_meta.txt"),
header = TRUE, as.is = TRUE)
rownames(meta) <- meta$names
meta$dex <- factor(meta$dex)
meta$cell <- factor(meta$cell)
meta
library(gskTools)
makeProject
fc <- readRDS(paste0(datadir, "/airway/featureCounts/star_featurecounts.rds"))
names(fc)
counts_featurecounts <- fc$counts
head(counts_featurecounts)
dim(counts_featurecounts)
fc$stat
View(counts_featurecounts)
View(counts_featurecounts)
fc$annotation
fc$annotation %>% View()
library(dplyr)
fc$annotation %>% View()
str(fc)
suppressPackageStartupMessages({
library(tximeta)
library(DESeq2)
library(org.Hs.eg.db)
library(SummarizedExperiment)
})
## List all quant.sf output files from Salmon
salmonfiles <- paste0(datadir, "/airway/salmon/", meta$names, "/quant.sf")
names(salmonfiles) <- meta$names
stopifnot(all(file.exists(salmonfiles)))
salmonfiles
suppressPackageStartupMessages({
library(tximeta)
library(DESeq2)
library(org.Hs.eg.db)
library(SummarizedExperiment)
})
## List all quant.sf output files from Salmon
salmonfiles <- paste0(datadir, "/airway/salmon/", meta$names, "/quant.sf")
names(salmonfiles) <- meta$names
stopifnot(all(file.exists(salmonfiles)))
## Add a column "files" to the metadata table. This table must contain at least
## two columns: "names" and "files"
coldata <- cbind(meta, files = salmonfiles, stringsAsFactors = FALSE)
## Import quantifications on the transcript level
st <- tximeta::tximeta(coldata)
## Summarize quantifications on the gene level
sg <- tximeta::summarizeToGene(st)
## Add gene symbols
sg <- tximeta::addIds(sg, "SYMBOL", gene = TRUE)
sg
counts_salmon <- round(assay(sg, "counts"))
spl <- "SRR1039508"
gns <- rownames(counts_salmon)
quants <- data.frame(featureCounts = counts_featurecounts[gns, spl],
salmon = counts_salmon[gns, spl])
pairs(quants)
colData(sg)
View(coldata)
View(coldata)
?tximeta
salmonfiles
gns
class(gns)
View(counts_salmon)
gns <- rownames(counts_salmon)
View(gns)
?colData
colData(sg)
colData(sg)$dex
colData(sg)$cell
colData(st)
dim(st)
dim(sg)
colData(sg)$dex <- relevel(colData(sg)$dex, ref = "untrt")
colData(sg)$dex
?relevel
ds_se <- DESeqDataSet(sg, design = ~ cell + dex)
stopifnot(all(colnames(counts_salmon) == rownames(meta)))
meta$dex <- relevel(meta$dex, ref = "untrt")
ds_matrix <- DESeqDataSetFromMatrix(countData = counts_salmon,
colData = meta,
design = ~ cell + dex)
suppressPackageStartupMessages({
library(edgeR)
})
genetable <- data.frame(gene.id = rownames(counts_salmon),
stringsAsFactors = FALSE)
stopifnot(all(rownames(meta) == colnames(counts_salmon)))
dge <- DGEList(counts = counts_salmon,
samples = meta,
genes = genetable)
names(dge)
avetxlengths <- assay(sg, "length")
stopifnot(all(rownames(avetxlengths) == rownames(counts_salmon)))
stopifnot(all(colnames(avetxlengths) == colnames(counts_salmon)))
avetxlengths <- avetxlengths/exp(rowMeans(log(avetxlengths)))
offsets <- log(calcNormFactors(counts_salmon/avetxlengths)) +
log(colSums(counts_salmon/avetxlengths))
dge <- scaleOffset(dge, t(t(log(avetxlengths)) + offsets))
names(dge)
dge <- edgeR::calcNormFactors(dge)
dge$samples
vsd <- DESeq2::vst(ds_se)
class(vsd)
head(colData(vsd), 3)
test<-vsd
colData(test)
colData(test)<-"hello"
colData(test)<-1
DESeq2::plotPCA(vsd, intgroup = "cell")
DESeq2::plotPCA(vsd, intgroup = "dex")
plotMDS(dge, top = 500, labels = NULL, col = as.numeric(dge$samples$dex),
pch = as.numeric(dge$samples$cell), cex = 2, gene.selection = "common")
ds_se <- DESeq2::DESeq(ds_se)
DESeq2::plotDispEsts(ds_se)
str(de.se)
str(de_se)
str(ds_se)
colData(ds_se)
ds_se@design
ds_se@dispersionFunction()
ds_se@metadata
View(ds_se)
View(ds_se)
dim(ds_se)
ds_se <- DESeqDataSet(sg, design = ~ cell + dex)
dim(ds_se)
ds_se <- DESeq2::DESeq(ds_se)
DESeq2::plotDispEsts(ds_se)
dim(ds_se)
res <- DESeq2::results(ds_se)
head(res)
mcols(res, use.names = TRUE)
summary(res)
hist(res$pvalue)
## We also add a couple of extra columns that will be useful for the interactive
## visualization later
res$log10BaseMean <- log10(res$baseMean)
res$mlog10PValue <- -log10(res$pvalue)
rowData(ds_se)$log10Dispersion <- log10(rowData(ds_se)$dispersion)
rowData(ds_se)$DESeq2_dex_trt_vs_untrt <- res
res.05 <- results(ds_se, alpha = 0.05)
table(res.05$padj < 0.05)
head(res.05)
table(res$padj < 0.05)
?results
dim(res)
res.05 <- results(ds_se, alpha = 0.05)
table(res.05$padj < 0.05)
table(res$padj < 0.05)
table(res$padj < 0.1)
dim(res.05)
sum(table(res$padj < 0.1))
sum(table(res$padj < 0.1));sum(table(res.05$padj < 0.1))
res.05 <- results(ds_se, alpha = 0.5)
table(res$padj < 0.5)
sum(table(res$padj < 0.1));sum(table(res.05$padj < 0.1))
class(res)
mcols(res)
mcols(ds_se)
mcols(ds_se) %>% names()
resLFC1 <- results(ds_se, lfcThreshold = 1)
summary(resLFC1)
table(resLFC1$padj < 0.1)
plotCounts(ds_se, gene = "ENSG00000000003.14", intgroup = "dex",
normalized = TRUE, transform = FALSE)
names(dge)
design <- model.matrix(~ cell + dex, data = dge$samples)
keep <- edgeR::filterByExpr(dge, design)
dge <- dge[keep, ]
dge <- edgeR::estimateDisp(dge, design)
edgeR::plotBCV(dge)
?edgeR::filterByExpr
res.05 <- results(ds_se, alpha = 0.05)
table(res.05$padj < 0.05)
res.05 <- results(ds_se, alpha = 0.05)
table(res.05$padj < 0.05)
table(res$padj < 0.1)
sum(table(res$padj < 0.1));sum(table(res.05$padj < 0.1))
names(res)
res %>% select(pvalue) %>% head
res$pvalue %>% in.na() %>% sum()
res$pvalue %>% is.na() %>% sum()
res$pvalue %>% is.na() %>% sum() ; res.05$pvalue %>% is.na() %>% sum()
res.05 <- results(ds_se, alpha = 0.5)
table(res.05$padj < 0.5)
sum(table(res$padj < 0.1));sum(table(res.05$padj < 0.1))
sum(table(res$padj < 0.1));sum(table(res.05$padj < 0.5))
res$pvalue %>% is.na() %>% sum() ; res.05$pvalue %>% is.na() %>% sum()
names(res)
res$padj %>% is.na() %>% sum() ; res.05$padj %>% is.na() %>% sum()
design <- model.matrix(~ cell + dex, data = dge$samples)
keep <- edgeR::filterByExpr(dge, design)
dge <- dge[keep, ]
dge <- edgeR::estimateDisp(dge, design)
edgeR::plotBCV(dge)
fit <- edgeR::glmQLFit(dge, design)
qlf <- edgeR::glmQLFTest(fit, coef = ncol(design))
tt.all <- edgeR::topTags(qlf, n = nrow(dge), sort.by = "none") # all genes
hist(tt.all$table$PValue)
tt <- edgeR::topTags(qlf, n = nrow(dge), p.value = 0.1) # genes with adj.p<0.1
tt10 <- edgeR::topTags(qlf) # just the top 10 by default
tt10
summary(fit)
fit
shared <- intersect(rownames(res), tt.all$table$gene.id)
table(DESeq2 = res$padj[match(shared, rownames(res))] < 0.1,
edgeR = tt.all$table$FDR[match(shared, tt.all$table$gene.id)] < 0.1)
plot(rank(res$pvalue[match(shared, rownames(res))]),
rank(tt.all$table$PValue[match(shared, tt.all$table$gene.id)]),
cex = 0.1, xlab = "DESeq2", ylab = "edgeR")
treatres <- edgeR::glmTreat(fit, coef = ncol(design), lfc = 1)
tt.treat <- edgeR::topTags(treatres, n = nrow(dge), sort.by = "none")
sum(res$pvalue < 0.05, na.rm = TRUE)
sum(!is.na(res$pvalue))
round(sum(!is.na(res$pvalue)) * 0.05)
round(sum(!is.na(res$pvalue)) * 0.05) # expected 'null' less than 0.05
sum(res$pvalue < 0.05, na.rm = TRUE) # observed p < .05
# expected ratio of false positives in the set with p < .05
round(sum(!is.na(res$pvalue))*0.05 / sum(res$pvalue < 0.05, na.rm = TRUE), 2)
sum(res$padj < 0.1, na.rm = TRUE)
library(apeglm)
DESeq2::resultsNames(ds_se)
res <- DESeq2::lfcShrink(ds_se, coef = "dex_trt_vs_untrt", type = "apeglm")
DESeq2::plotMA(res, ylim = c(-5, 5))
edgeR::plotSmear(qlf, de.tags = tt$table$gene.id)
suppressPackageStartupMessages({
library(pheatmap)
})
mat <- assay(vsd)[head(order(res$padj), 30), ]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(vsd)[, c("cell", "dex")])
pheatmap(mat, annotation_col = df)

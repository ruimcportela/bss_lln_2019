View(proteinGroups)
View(proteinGroups)
View(proteinGroups)
only_site <- proteinGroups$Only.identified.by.site
length(only_site)
only_site[is.na(only_site)] <- ""
proteinsOnlyIdentifiedWithPTMs <- proteinGroups$Protein.IDs[only_site=="+"]
pepData<-pepData[!(fData(pepData)$Proteins %in% proteinsOnlyIdentifiedWithPTMs),]
rm(proteinGroups,only_site)
rm(proteinGroups,only_site)
gc()
pepData<-pepData[fData(pepData)$nNonZero>=2,]
nrow(pepData)
pepData <- normalise(pepData, "quantiles")
plotDensities(exprs(pepData))
plotMDS(exprs(pepData),col=as.double(pData(pepData)$condition))
protData<-combineFeatures(pepData,fcol="Proteins",method="median",na.rm=TRUE)
protData<-protData[
protData %>% exprs %>% is.na %>% `!` %>% rowSums>4,]
plotMDS(exprs(protData),col=as.double(pData(pepData)$condition))
protMSqRob <- MSnSet2protdata(protData, "Proteins")
models <- fit.model(protdata=protMSqRob, response="quant_value", fixed="condition",shrinkage.fixed=c(0,0),robust_var=FALSE)
L <- makeContrast("conditionB - conditionA",  levels=c("conditionA","conditionB"))
tests <- test.contrast_adjust(models, L)
nSig <- sum(tests$signif,na.rm=TRUE)
head(tests,nSig)
volcano<- ggplot(tests,aes(x=estimate,y=-log10(pval),color=signif)) + geom_point() + scale_color_manual(values=c("black","red"))
volcano
sigNames<- tests %>% rownames_to_column("protein") %>% filter(signif) %>% pull(protein)
heatmap(exprs(protData)[sigNames,])
for (protName in rownames(tests)[1:5])
{
plotDat<-pepData[fData(pepData)$Proteins==protName] %>% exprs
plotDataStack<-data.frame(quant_value=c(plotDat),sequence=rep(rownames(plotDat),rep=ncol(plotDat)),sample=rep(colnames(plotDat),each=nrow(plotDat)),condition=rep(pData(pepData)$condition,each=nrow(plotDat)))
plot1 <- ggplot(plotDataStack, aes(x=sample, y=quant_value,fill=condition))
print(plot1 +geom_boxplot(outlier.shape=NA) + geom_point(position=position_jitter(width=.1),aes(shape=sequence)) + scale_shape_manual(values=1:nrow(plotDat)) +labs(title = protName, x="sample", y="Peptide intensity (log2)"))
}
tests$spike <- tests %>% rownames %>% grepl(.,pattern="UPS")
ggplot(tests, aes(x=spike, y=estimate)) +
geom_boxplot() +
geom_hline(yintercept=c(0,log(0.74/0.25,base=2)),color="red")+
ylab("log2 FC")
tests<-tests %>% rownames_to_column("protein") %>%
mutate(
FDP=cumsum(!spike)/(1:length(spike)),
TPR=cumsum(spike)/sum(spike)) %>%
column_to_rownames("protein")
ggplot(tests,aes(x=FDP,y=TPR)) + geom_path() +geom_vline(xintercept=0.05,lty=2) + geom_point(data=tests[sum(tests$signif,na.rm=TRUE),],aes(x=FDP,y=TPR),cex=2)
library(plotly)
volcano<- ggplot(tests %>% rownames_to_column("protein"),aes(x=estimate,y=-log10(pval),color=signif,protein=protein)) + geom_point() + scale_color_manual(values=c("black","red"))
ggplotly(volcano)
tests$spike <- tests %>% rownames %>% grepl(.,pattern="UPS")
ggplot(tests, aes(x=spike, y=estimate)) +
geom_boxplot() +
geom_hline(yintercept=c(0,log(0.74/0.25,base=2)),color="red")+
ylab("log2 FC")
tests<-tests %>% rownames_to_column("protein") %>%
mutate(
FDP=cumsum(!spike)/(1:length(spike)),
TPR=cumsum(spike)/sum(spike)) %>%
column_to_rownames("protein")
ggplot(tests,aes(x=FDP,y=TPR)) + geom_path() +geom_vline(xintercept=0.05,lty=2) + geom_point(data=tests[sum(tests$signif,na.rm=TRUE),],aes(x=FDP,y=TPR),cex=2)
#protData<-combineFeatures(pepData,fcol="Proteins",method="median",na.rm=TRUE)
protData<-combineFeatures(pepData,fcol="Proteins",method="robust",na.rm=TRUE)
protData<-protData[
protData %>% exprs %>% is.na %>% `!` %>% rowSums>4,]
plotMDS(exprs(protData),col=as.double(pData(pepData)$condition))
protMSqRob <- MSnSet2protdata(protData, "Proteins")
models <- fit.model(protdata=protMSqRob, response="quant_value", fixed="condition",shrinkage.fixed=c(0,0),robust_var=FALSE)
L <- makeContrast("conditionB - conditionA",  levels=c("conditionA","conditionB"))
tests <- test.contrast_adjust(models, L)
nSig <- sum(tests$signif,na.rm=TRUE)
head(tests,nSig)
volcano<- ggplot(tests,aes(x=estimate,y=-log10(pval),color=signif)) + geom_point() + scale_color_manual(values=c("black","red"))
volcano
library(plotly)
volcano<- ggplot(tests %>% rownames_to_column("protein"),aes(x=estimate,y=-log10(pval),color=signif,protein=protein)) + geom_point() + scale_color_manual(values=c("black","red"))
ggplotly(volcano)
sigNames<- tests %>% rownames_to_column("protein") %>% filter(signif) %>% pull(protein)
heatmap(exprs(protData)[sigNames,])
for (protName in rownames(tests)[1:5])
{
plotDat<-pepData[fData(pepData)$Proteins==protName] %>% exprs
plotDataStack<-data.frame(quant_value=c(plotDat),sequence=rep(rownames(plotDat),rep=ncol(plotDat)),sample=rep(colnames(plotDat),each=nrow(plotDat)),condition=rep(pData(pepData)$condition,each=nrow(plotDat)))
plot1 <- ggplot(plotDataStack, aes(x=sample, y=quant_value,fill=condition))
print(plot1 +geom_boxplot(outlier.shape=NA) + geom_point(position=position_jitter(width=.1),aes(shape=sequence)) + scale_shape_manual(values=1:nrow(plotDat)) +labs(title = protName, x="sample", y="Peptide intensity (log2)"))
}
tests$spike <- tests %>% rownames %>% grepl(.,pattern="UPS")
ggplot(tests, aes(x=spike, y=estimate)) +
geom_boxplot() +
geom_hline(yintercept=c(0,log(0.74/0.25,base=2)),color="red")+
ylab("log2 FC")
tests<-tests %>% rownames_to_column("protein") %>%
mutate(
FDP=cumsum(!spike)/(1:length(spike)),
TPR=cumsum(spike)/sum(spike)) %>%
column_to_rownames("protein")
ggplot(tests,aes(x=FDP,y=TPR)) + geom_path() +geom_vline(xintercept=0.05,lty=2) + geom_point(data=tests[sum(tests$signif,na.rm=TRUE),],aes(x=FDP,y=TPR),cex=2)
?grepEcols
library(MSqRob)
library(MSnbase)
library(tidyverse)
library(limma)
# proteinGroups data
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cptacAvsB_lab3/peptides.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cptacAvsB_lab3/proteinGroups.txt"
#Cancer data
peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/peptides3vs3.txt"
proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/proteinGroups.txt"
peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/peptides9vs9.txt"
proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesCRD.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesRCB.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
# Given a text spread sheet f and a pattern to be matched to its header (first line in the file), the function returns the matching columns names or indices of the corresponding data.frame.
ecols<-grepEcols(peptidesFile, "Intensity ", split = "\t")
library(MSqRob)
library(MSnbase)
library(tidyverse)
library(limma)
# proteinGroups data
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cptacAvsB_lab3/peptides.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cptacAvsB_lab3/proteinGroups.txt"
#Cancer data
peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/peptides3vs3.txt"
proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/proteinGroups.txt"
peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/peptides9vs9.txt"
proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesCRD.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesRCB.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
# Given a text spread sheet f and a pattern to be matched to its header (first line in the file), the function returns the matching columns names or indices of the corresponding data.frame.
ecols<-grepEcols(peptidesFile, "Intensity ", split = "\t")
pepData<-readMSnSet2(peptidesFile,ecol=ecols,fnames="Sequence",sep="\t")
pepData
library(MSqRob)
library(MSnbase)
library(tidyverse)
library(limma)
# proteinGroups data
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cptacAvsB_lab3/peptides.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cptacAvsB_lab3/proteinGroups.txt"
#Cancer data
peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/peptides3vs3.txt"
proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/peptides9vs9.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesCRD.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesRCB.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
# Given a text spread sheet f and a pattern to be matched to its header (first line in the file), the function returns the matching columns names or indices of the corresponding data.frame.
ecols<-grepEcols(peptidesFile, "Intensity ", split = "\t")
pepData<-readMSnSet2(peptidesFile,ecol=ecols,fnames="Sequence",sep="\t")
pepData
head(exprs(pepData))
pepData %>% exprs %>% head
pepData %>% sampleNames
sampleNames(pepData) <- pepData %>% sampleNames %>% str_replace(., pattern="Intensity.", replacement="")
pepData<-selectFeatureData(pepData,fcol=c("Proteins","Potential.contaminant","Reverse","Sequence"))
pepData<-selectFeatureData(pepData)
pepData<-selectFeatureData(pepData,fcol=c("Proteins","Protein.names","Gene.names", "Contaminant","Reverse","Sequence"))
fData(pepData)$nNonZero<- rowSums(exprs(pepData) > 0)
fData(pepData) %>% head()
exprs(pepData)[exprs(pepData)==0]<-NA
pData(pepData)$condition <- pepData %>% sampleNames %>% substr(1,1) %>% as.factor
pepData
pData(pepData)
pepData %>% sampleNames
plotNA(pepData)
plotDensities(exprs(pepData))
plotDensities(exprs(pepData))
nrow(pepData)
pepData <- log(pepData, base = 2)
plotDensities(exprs(pepData))
pepData<-pepData[fData(pepData)$Proteins %in% smallestUniqueGroups(fData(pepData)$Proteins),]
pepData <- pepData[fData(pepData)$Reverse!="+",]
pepData <- pepData[fData(pepData)$Potential.contaminant!="+",]
proteinGroups<-read.table(proteinGroupsFile, sep = "\t", header = TRUE, quote = "", comment.char = "")
only_site <- proteinGroups$Only.identified.by.site
only_site[is.na(only_site)] <- ""
proteinsOnlyIdentifiedWithPTMs <- proteinGroups$Protein.IDs[only_site=="+"]
pepData<-pepData[!(fData(pepData)$Proteins %in% proteinsOnlyIdentifiedWithPTMs),]
rm(proteinGroups,only_site)
gc()
pepData<-pepData[fData(pepData)$nNonZero>=2,]
nrow(pepData)
pepData <- normalise(pepData, "quantiles")
plotDensities(exprs(pepData))
library(MSqRob)
library(MSnbase)
library(tidyverse)
library(limma)
# proteinGroups data
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cptacAvsB_lab3/peptides.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cptacAvsB_lab3/proteinGroups.txt"
#Cancer data
peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/peptides3vs3.txt"
proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/peptides9vs9.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesCRD.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesRCB.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
# Given a text spread sheet f and a pattern to be matched to its header (first line in the file), the function returns the matching columns names or indices of the corresponding data.frame.
ecols<-grepEcols(peptidesFile, "Intensity ", split = "\t")
pepData<-readMSnSet2(peptidesFile,ecol=ecols,fnames="Sequence",sep="\t")
pepData
head(exprs(pepData))
pepData %>% exprs %>% head
pepData %>% sampleNames
sampleNames(pepData) <- pepData %>% sampleNames %>% str_replace(., pattern="Intensity.", replacement="")
pepData<-selectFeatureData(pepData,fcol=c("Proteins","Protein.names","Gene.names", "Contaminant","Reverse","Sequence"))
fData(pepData)$nNonZero<- rowSums(exprs(pepData) > 0)
fData(pepData) %>% head()
exprs(pepData)[exprs(pepData)==0]<-NA
pData(pepData)$condition <- pepData %>% sampleNames %>% substr(1,1) %>% as.factor
plotNA(pepData)
plotDensities(exprs(pepData))
nrow(pepData)
pepData <- log(pepData, base = 2)
plotDensities(exprs(pepData))
pepData<-pepData[fData(pepData)$Proteins %in% smallestUniqueGroups(fData(pepData)$Proteins),]
pepData <- pepData[fData(pepData)$Reverse!="+",]
pepData <- pepData[fData(pepData)$Potential.contaminant!="+",]
proteinGroups<-read.table(proteinGroupsFile, sep = "\t", header = TRUE, quote = "", comment.char = "")
only_site <- proteinGroups$Only.identified.by.site
only_site[is.na(only_site)] <- ""
proteinsOnlyIdentifiedWithPTMs <- proteinGroups$Protein.IDs[only_site=="+"]
pepData<-pepData[!(fData(pepData)$Proteins %in% proteinsOnlyIdentifiedWithPTMs),]
iris %>% names()
head(iris)
iris %>% filter(Sepal.Length>5)
iris %>% filter(Sepal>5)
pepData<-selectFeatureData(pepData)
library(MSqRob)
library(MSnbase)
library(tidyverse)
library(limma)
# proteinGroups data
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cptacAvsB_lab3/peptides.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cptacAvsB_lab3/proteinGroups.txt"
#Cancer data
peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/peptides3vs3.txt"
proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/peptides9vs9.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesCRD.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesRCB.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
# Given a text spread sheet f and a pattern to be matched to its header (first line in the file), the function returns the matching columns names or indices of the corresponding data.frame.
ecols<-grepEcols(peptidesFile, "Intensity ", split = "\t")
pepData<-readMSnSet2(peptidesFile,ecol=ecols,fnames="Sequence",sep="\t")
pepData
head(exprs(pepData))
pepData %>% exprs %>% head
pepData %>% sampleNames
sampleNames(pepData) <- pepData %>% sampleNames %>% str_replace(., pattern="Intensity.", replacement="")
pepData<-selectFeatureData(pepData,fcol=c("Proteins","Protein.names","Gene.names", "Contaminant","Reverse","Sequence"))
fData(pepData)$nNonZero<- rowSums(exprs(pepData) > 0)
fData(pepData) %>% head()
exprs(pepData)[exprs(pepData)==0]<-NA
pData(pepData)$condition <- pepData %>% sampleNames %>% substr(1,1) %>% as.factor
plotNA(pepData)
plotDensities(exprs(pepData))
nrow(pepData)
pepData <- log(pepData, base = 2)
plotDensities(exprs(pepData))
pepData<-pepData[fData(pepData)$Proteins %in% smallestUniqueGroups(fData(pepData)$Proteins),]
pepData <- pepData[fData(pepData)$Reverse!="+",]
pepData <- pepData[fData(pepData)$Contaminant!="+",]
pepData <- pepData[fData(pepData)$Reverse!="+",]
pepData <- pepData[fData(pepData)$Contaminant!="+",]
pepData <- pepData[fData(pepData)$Reverse!="+",]
pepData <- pepData[fData(pepData)$Contaminant!="+",]
nrows(pepDataa)
nrows(pepData)
nrow(pepData)
proteinGroups<-read.table(proteinGroupsFile, sep = "\t", header = TRUE, quote = "", comment.char = "")
only_site <- proteinGroups$Only.identified.by.site
only_site[is.na(only_site)] <- ""
proteinsOnlyIdentifiedWithPTMs <- proteinGroups$Protein.IDs[only_site=="+"]
pepData<-pepData[!(fData(pepData)$Proteins %in% proteinsOnlyIdentifiedWithPTMs),]
test<-pepData[fData(pepData)$nNonZero>=2,]
nrow(test)
pepData<-pepData[fData(pepData)$nNonZero>=2,]
nrow(pepData)
pepData <- normalise(pepData, "quantiles")
plotDensities(exprs(pepData))
plotMDS(exprs(pepData),col=as.double(pData(pepData)$condition))
#protData<-combineFeatures(pepData,fcol="Proteins",method="median",na.rm=TRUE)
protData<-combineFeatures(pepData,fcol="Proteins",method="robust",na.rm=TRUE)
protData<-protData[
protData %>% exprs %>% is.na %>% `!` %>% rowSums>4,]
plotMDS(exprs(protData),col=as.double(pData(pepData)$condition))
protMSqRob <- MSnSet2protdata(protData, "Proteins")
models <- fit.model(protdata=protMSqRob, response="quant_value", fixed="condition",shrinkage.fixed=c(0,0),robust_var=FALSE)
L <- makeContrast("conditionO - conditionP",  levels=c("conditionP","conditionO"))
tests <- test.contrast_adjust(models, L)
nSig <- sum(tests$signif,na.rm=TRUE)
head(tests,nSig)
models
models@accession
models@model
protMSqRob <- MSnSet2protdata(protData, "Proteins")
models <- fit.model(protdata=protMSqRob, response="quant_value", fixed="condition",shrinkage.fixed=c(0,0),robust_var=FALSE)
L <- makeContrast("conditionO - conditionP",  levels=c("conditionO","conditionP"))
tests <- test.contrast_adjust(models, L)
tests
nSig <- sum(tests$signif,na.rm=TRUE)
head(tests,nSig)
tests
nSig
tests
volcano<- ggplot(tests,aes(x=estimate,y=-log10(pval),color=signif)) + geom_point() + scale_color_manual(values=c("black","red"))
volcano
library(plotly)
volcano<- ggplot(tests %>% rownames_to_column("protein"),aes(x=estimate,y=-log10(pval),color=signif,protein=protein)) + geom_point() + scale_color_manual(values=c("black","red"))
ggplotly(volcano)
sigNames<- tests %>% rownames_to_column("protein") %>% filter(signif) %>% pull(protein)
heatmap(exprs(protData)[sigNames,])
sigNames<- tests %>% rownames_to_column("protein") %>% filter(signif) %>% pull(protein)
heatmap(exprs(protData)[1:10,])
library(MSqRob)
library(MSnbase)
library(tidyverse)
library(limma)
# proteinGroups data
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cptacAvsB_lab3/peptides.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cptacAvsB_lab3/proteinGroups.txt"
#Cancer data
#◙peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/peptides3vs3.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/proteinGroups.txt"
peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/peptides9vs9.txt"
proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/cancer/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesCRD.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
#peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesRCB.txt"
#proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
# Given a text spread sheet f and a pattern to be matched to its header (first line in the file), the function returns the matching columns names or indices of the corresponding data.frame.
ecols<-grepEcols(peptidesFile, "Intensity ", split = "\t")
pepData<-readMSnSet2(peptidesFile,ecol=ecols,fnames="Sequence",sep="\t")
pepData
head(exprs(pepData))
pepData %>% exprs %>% head
pepData %>% sampleNames
sampleNames(pepData) <- pepData %>% sampleNames %>% str_replace(., pattern="Intensity.", replacement="")
pepData<-selectFeatureData(pepData,fcol=c("Proteins","Protein.names","Gene.names", "Contaminant","Reverse","Sequence"))
fData(pepData)$nNonZero<- rowSums(exprs(pepData) > 0)
fData(pepData) %>% head()
exprs(pepData)[exprs(pepData)==0]<-NA
pData(pepData)$condition <- pepData %>% sampleNames %>% substr(1,1) %>% as.factor
plotNA(pepData)
plotDensities(exprs(pepData))
nrow(pepData)
pepData <- log(pepData, base = 2)
plotDensities(exprs(pepData))
pepData<-pepData[fData(pepData)$Proteins %in% smallestUniqueGroups(fData(pepData)$Proteins),]
pepData <- pepData[fData(pepData)$Reverse!="+",]
pepData <- pepData[fData(pepData)$Contaminant!="+",]
proteinGroups<-read.table(proteinGroupsFile, sep = "\t", header = TRUE, quote = "", comment.char = "")
only_site <- proteinGroups$Only.identified.by.site
only_site[is.na(only_site)] <- ""
proteinsOnlyIdentifiedWithPTMs <- proteinGroups$Protein.IDs[only_site=="+"]
pepData<-pepData[!(fData(pepData)$Proteins %in% proteinsOnlyIdentifiedWithPTMs),]
rm(proteinGroups,only_site)
gc()
pepData<-pepData[fData(pepData)$nNonZero>=2,]
nrow(pepData)
pepData <- normalise(pepData, "quantiles")
plotDensities(exprs(pepData))
plotMDS(exprs(pepData),col=as.double(pData(pepData)$condition))
#protData<-combineFeatures(pepData,fcol="Proteins",method="median",na.rm=TRUE)
protData<-combineFeatures(pepData,fcol="Proteins",method="robust",na.rm=TRUE)
protData<-protData[
protData %>% exprs %>% is.na %>% `!` %>% rowSums>4,]
plotMDS(exprs(protData),col=as.double(pData(pepData)$condition))
protMSqRob <- MSnSet2protdata(protData, "Proteins")
models <- fit.model(protdata=protMSqRob, response="quant_value", fixed="condition",shrinkage.fixed=c(0,0),robust_var=FALSE)
L <- makeContrast("conditionO - conditionP",  levels=c("conditionO","conditionP"))
tests <- test.contrast_adjust(models, L)
nSig <- sum(tests$signif,na.rm=TRUE)
head(tests,nSig)
volcano<- ggplot(tests,aes(x=estimate,y=-log10(pval),color=signif)) + geom_point() + scale_color_manual(values=c("black","red"))
volcano
sigNames<- tests %>% rownames_to_column("protein") %>% filter(signif) %>% pull(protein)
heatmap(exprs(protData)[1:10,])
sigNames<- tests %>% rownames_to_column("protein") %>% filter(signif) %>% pull(protein)
heatmap(exprs(protData)[sigNames,])
library(MSqRob)
library(MSnbase)
library(tidyverse)
library(limma)
peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesCRD.txt"
proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
ecols<-grepEcols(peptidesFile, "Intensity ", split = "\t")
pepData<-readMSnSet2(peptidesFile,ecol=ecols,fnames="Sequence",sep="\t")
pepData
head(exprs(pepData))
pepData %>% exprs %>% head
pepData %>% sampleNames
sampleNames(pepData) <- pepData %>% sampleNames %>% str_replace(., pattern="Intensity.", replacement="")
pepData<-selectFeatureData(pepData,fcol=c("Proteins","Protein.names","Gene.names", "Potential.contaminant","Reverse","Sequence"))
fData(pepData)$nNonZero<- rowSums(exprs(pepData) > 0)
exprs(pepData)[exprs(pepData)==0]<-NA
pData(pepData)$cellType <- pepData %>% sampleNames %>% substr(1,4) %>% as.factor
sampleNames(pepData)<-pepData %>% sampleNames %>% substr(1,4) %>% paste0(.,"_m",1:8)
plotNA(pepData)
plotDensities(exprs(pepData))
nrow(pepData)
pepData <- log(pepData, base = 2)
plotDensities(exprs(pepData))
pepData<-pepData[fData(pepData)$Proteins %in% smallestUniqueGroups(fData(pepData)$Proteins),]
pepData <- pepData[fData(pepData)$Reverse!="+",]
pepData <- pepData[fData(pepData)$Potential.contaminant!="+",]
proteinGroups<-read.table(proteinGroupsFile, sep = "\t", header = TRUE, quote = "", comment.char = "")
only_site <- proteinGroups$Only.identified.by.site
only_site[is.na(only_site)] <- ""
proteinsOnlyIdentifiedWithPTMs <- proteinGroups$Protein.IDs[only_site=="+"]
pepData<-pepData[!(fData(pepData)$Proteins %in% proteinsOnlyIdentifiedWithPTMs),]
rm(proteinGroups,only_site)
gc()
pepData<-pepData[fData(pepData)$nNonZero>=2,]
nrow(pepData)
pepData <- normalise(pepData, "quantiles")
plotDensities(exprs(pepData))
plotMDS(exprs(pepData),col=as.double(pData(pepData)$cellType))
protData<-combineFeatures(pepData,fcol="Proteins",method="robust",na.rm=TRUE)
protData<-protData[
protData %>% exprs %>% is.na %>% `!` %>% rowSums>4,]
plotMDS(exprs(protData),col=as.double(pData(pepData)$cellType))
protMSqRob <- MSnSet2protdata(protData, "Proteins",annotations=c("Protein.names","Gene.names"))
models <- fit.model(protdata=protMSqRob, response="quant_value", fixed="cellType",shrinkage.fixed=c(0,0),robust_var=FALSE)
L <- makeContrast("cellTypeTreg - cellTypeTcon",  levels=c("cellTypeTreg","cellTypeTcon"))
tests <- test.contrast_adjust(models, L)
nSig <- sum(tests$signif,na.rm=TRUE)
head(tests,nSig)
volcano<- ggplot(tests,aes(x=estimate,y=-log10(pval),color=signif)) + geom_point() + scale_color_manual(values=c("black","red"))
volcano
sigNames<- tests %>% rownames_to_column("protein") %>% filter(signif) %>% pull(protein)
heatmap(exprs(protData)[sigNames,])
for (protName in rownames(tests)[1:5])
{
plotDat<-pepData[fData(pepData)$Proteins==protName] %>% exprs
plotDataStack<-data.frame(quant_value=c(plotDat),sequence=rep(rownames(plotDat),rep=ncol(plotDat)),sample=rep(colnames(plotDat),each=nrow(plotDat)),condition=rep(pData(pepData)$cellType,each=nrow(plotDat)))
plot1 <- ggplot(plotDataStack, aes(x=sample, y=quant_value,fill=condition))
print(plot1 +geom_boxplot(outlier.shape=NA) + geom_point(position=position_jitter(width=.1),aes(shape=sequence)) + scale_shape_manual(values=1:nrow(plotDat)) +labs(title = protName, x="sample", y="Peptide intensity (log2)"))
}
library(MSqRob)
library(MSnbase)
library(tidyverse)
library(limma)
peptidesFile <- "https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/peptidesRCB.txt"
proteinGroupsFile <-"https://raw.githubusercontent.com/statOmics/pda/data/quantification/mouseTcell/proteinGroups.txt"
ecols<-grepEcols(peptidesFile, "Intensity ", split = "\t")
pepData<-readMSnSet2(peptidesFile,ecol=ecols,fnames="Sequence",sep="\t")
pepData
head(exprs(pepData))
pepData %>% exprs %>% head
pepData %>% sampleNames
sampleNames(pepData) <- pepData %>% sampleNames %>% str_replace(., pattern="Intensity.", replacement="")
pepData<-selectFeatureData(pepData,fcol=c("Proteins","Protein.names","Gene.names", "Potential.contaminant","Reverse","Sequence"))
fData(pepData)$nNonZero<- rowSums(exprs(pepData) > 0)
exprs(pepData)[exprs(pepData)==0]<-NA
pData(pepData)$cellType <- pepData %>% sampleNames %>% substr(1,4) %>% as.factor
pData(pepData)$mouseID <- factor(paste0("m",rep(1:4,2)))
sampleNames(pepData)<-pepData %>% sampleNames %>% substr(1,4) %>% paste0(.,"_m",rep(1:4,2))
plotNA(pepData)
plotDensities(exprs(pepData))
nrow(pepData)
pepData <- log(pepData, base = 2)
plotDensities(exprs(pepData))
pepData<-pepData[fData(pepData)$Proteins %in% smallestUniqueGroups(fData(pepData)$Proteins),]
pepData <- pepData[fData(pepData)$Reverse!="+",]
pepData <- pepData[fData(pepData)$Potential.contaminant!="+",]
proteinGroups<-read.table(proteinGroupsFile, sep = "\t", header = TRUE, quote = "", comment.char = "")
only_site <- proteinGroups$Only.identified.by.site
only_site[is.na(only_site)] <- ""
proteinsOnlyIdentifiedWithPTMs <- proteinGroups$Protein.IDs[only_site=="+"]
pepData<-pepData[!(fData(pepData)$Proteins %in% proteinsOnlyIdentifiedWithPTMs),]
rm(proteinGroups,only_site)
gc()
pepData<-pepData[fData(pepData)$nNonZero>=2,]
nrow(pepData)
pepData <- normalise(pepData, "quantiles")
plotDensities(exprs(pepData))
plotMDS(exprs(pepData),col=as.double(pData(pepData)$cellType))
protData<-combineFeatures(pepData,fcol="Proteins",method="robust",na.rm=TRUE)
protData<-protData[
protData %>% exprs %>% is.na %>% `!` %>% rowSums>4,]
plotMDS(exprs(protData),col=as.double(pData(pepData)$cellType))
protMSqRob <- MSnSet2protdata(protData, "Proteins",annotations=c("Protein.names","Gene.names"))
models <- fit.model(protdata=protMSqRob, response="quant_value", fixed=c("cellType","mouseID"),shrinkage.fixed=c(0,0),robust_var=FALSE)
L <- makeContrast("cellTypeTreg - cellTypeTcon",  levels=c("cellTypeTreg","cellTypeTcon"))
tests <- test.contrast_adjust(models, L)
nSig <- sum(tests$signif,na.rm=TRUE)
head(tests,nSig)
volcano<- ggplot(tests,aes(x=estimate,y=-log10(pval),color=signif)) + geom_point() + scale_color_manual(values=c("black","red"))
volcano
sigNames<- tests %>% rownames_to_column("protein") %>% filter(signif) %>% pull(protein)
heatmap(exprs(protData)[sigNames,])
for (protName in rownames(tests)[1:5])
{
plotDat<-pepData[fData(pepData)$Proteins==protName] %>% exprs
plotDataStack<-data.frame(quant_value=c(plotDat),sequence=rep(rownames(plotDat),rep=ncol(plotDat)),sample=rep(colnames(plotDat),each=nrow(plotDat)),condition=rep(pData(pepData)$cellType,each=nrow(plotDat)))
plot1 <- ggplot(plotDataStack, aes(x=sample, y=quant_value,fill=condition))
print(plot1 +geom_boxplot(outlier.shape=NA) + geom_point(position=position_jitter(width=.1),aes(shape=sequence)) + scale_shape_manual(values=1:nrow(plotDat)) +labs(title = protName, x="sample", y="Peptide intensity (log2)"))
}
